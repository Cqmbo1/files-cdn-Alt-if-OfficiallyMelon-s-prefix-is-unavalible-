Anti-CamShake:

   //Find:

   .addCameraShake(

    // & wrap around with:

    if (!window.camshake) {
    }

        raw example;


        // replace:

        e.addCameraShake(P / 40);
                    
        // with:

        if (!window.camshake) {
        e.addCameraShake(P / 40);
        }



Anti-Knock:

    // Find first: 

    '.applyImpulse('


    // & wrap around with:

    'if (!window.antiknock) {
    }
    '


        raw example:


        // replace:

        L.applyImpulse(W)

        // with: 

        if (!window.antiknock) {
            L.applyImpulse(W)
        }

// Note on the comma above, replace with ';'


SecureEdge/Prevent Falloff:

// to find from non-modified js: search: ').preventFallOffEdge'

                        //''/

                        //' to define States and Bodies:

                        // const physicsBody = >>U<<.ents.getPhysicsBody(>>>O<<<);
                        // const moveState = >>U<<.ents.getMoveState(>>>O<<<);

                        // get vars from: 'onAdd: function(>>Y<<, P) {}'  & for (const P of >>>X<<<) 
                        // 1st var: '>><<'; 2nd: '>>><<<'

                        //' to find vars for toggle preventfalloff/secureEdge: 

                        //1st var: '<<>>'

                    //      if (!window.preventfalloff) {
                    //      if (physicsBody.preventFallOffEdge && !<<P>>._preventFallOffLastTick) {
                    //          (0, s.ac)();
                    //      }
                    //
                    //      physicsBody.preventFallOffEdge = moveState.crouching;
                    //        <<P>>._preventFallOffLastTick = moveState.crouching;
                    //    } else {
                    //        physicsBody.preventFallOffEdge = true;
                    //        <<P>>._preventFallOffLastTick = true;
                    //    }
                    
                    // get vars from (const <<P>> of X)

                    raw example:
                    
                    replace:

                        Y.ents.getPhysicsBody(X).preventFallOffEdge && !P._preventFallOffLastTick && (0,
                        q.Qb)(),
                        Y.ents.getPhysicsBody(X).preventFallOffEdge = Y.ents.getMoveState(X).crouching,
                        P._preventFallOffLastTick = Y.ents.getMoveState(X).crouching

                    with:

                        const physicsBody = Y.ents.getPhysicsBody(X);
                        const moveState = Y.ents.getMoveState(X);

                        if (!window.preventfalloff) {
                            if (physicsBody.preventFallOffEdge && !P._preventFallOffLastTick) {
                                (0, s.ac)();
                            }
        
                            physicsBody.preventFallOffEdge = moveState.crouching;
                            P._preventFallOffLastTick = moveState.crouching;
                        } else {
                            physicsBody.preventFallOffEdge = true;
                            P._preventFallOffLastTick = true;
                        }

Reach:

    // To find reach data go to first: tryHitEntity() { 

        find var from const (var)

        eg. P from: "const P" in:

            tryHitEntity() {
                var Y;
                const >>P<< = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                  , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3);
                return X === S.c.HIT_ENTITY ? {
                    pickDir: P,
                    hitEId: q,
                    meshNodeHit: O
                } : {
                    pickDir: P,
                    hitEId: null,
                    meshNodeHit: null
                }
            }

        then at (var, 3);  :

        add " * (window.reach || 1)" to 3 to form:

        (var, 3 * (window.reach || 1));

        raw example:

        before:

            tryHitEntity() {
                    var Y;
                    const P = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                    , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3);
                    return X === S.c.HIT_ENTITY ? {
                        pickDir: P,
                        hitEId: q,
                        meshNodeHit: O
                    } : {
                        pickDir: P,
                        hitEId: null,
                        meshNodeHit: null
                    }
                }

        to:

            tryHitEntity() {
                    var Y;
                    const P = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                    , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3 * (window.reach || 1));
                    return X === S.c.HIT_ENTITY ? {
                        pickDir: P,
                        hitEId: q,
                        meshNodeHit: O
                    } : {
                        pickDir: P,
                        hitEId: null,
                        meshNodeHit: null
                    }
                }


AutoClick:

    //  In file where Reach is (or: 2 functions under Reach, or: between breakingStart & upFirePrimary() {, OR (most accurate; above:

                upFirePrimary() {
                return super.upFirePrimary(),

    )) add:

            tick() {
                if (window.autoclick) {
                    const {pickDir: >>Y<<, hitEId: >>>P<<<, meshNodeHit: <<X>>} = this.tryHitEntity();
                    if (>>>P<<<) {
                        this.doAttack(>>Y<<, >>>P<<<, <<X>>);
                        this.breakEntity(>>Y<<, >>>P<<<);
                    }
                }
                if (this.heldItemState.__id === this.noa.playerEntity) {
                    let Y = !1;
                    return this.breaking && (Y = this.breakBlock()),
                    this.breakingParticles.tick(Y),
                    Y
                }
                return !1
            }
            // To find: pickDir: (), hitEId: (), meshNodeHit: () :  go to 2nd: downFirePrimary() { 

    Raw example:

        before:

            upFirePrimary() {
                return super.upFirePrimary(),
                this.breakingItem.upFirePrimary()
            }

        after:

            tick() {
                if (window.autoclick) {
                    const {pickDir: Y, hitEId: P, meshNodeHit: X} = this.tryHitEntity();
                    if (m) {
                        this.doAttack(Y, P, X);
                        this.breakEntity(Y, P);
                    }
                }
                if (this.heldItemState.__id === this.noa.playerEntity) {
                    let Y = !1;
                    return this.breaking && (Y = this.breakBlock()),
                    this.breakingParticles.tick(Y),
                    Y
                }
                return !1
            }
            //' To find: pickDir: (), hitEId: (), meshNodeHit: () :  go to 2nd: downFirePrimary() { '// 

            upFirePrimary() {
                return super.upFirePrimary(),
                this.breakingItem.upFirePrimary()
            }

Scaffold:

Copy placeBlock and turn into placeUnderPlayer:

1st var: >><<
2nd var: >>><<<
3rd var: >>>><<<<
4th var: >>>>><<<<<
5th var: >>>>>><<<<<<

raw example:

placeBlock:

            placeBlock() {
                var >>U<<<<;
                const >>>m<<< = this.noa.targetedBlock;
                let >>>>o<<<<;
                this.noa.serverSettings && (>>>>o<<<< = s.m[this.noa.serverSettings.defaultBlock].id);
                const n = this.noa.ents.hasComponent(this.noa.playerEntity, this.noa.ents.names.inventory);
                if (n) {
                    >>>>o<<<< = null;
                    const >>U<< = this.noa.ents.getInventoryState(this.noa.playerEntity).selectedItem;
                    !>>U<< || "CubeBlock" !== >>U<<.typeObj.type && "TwoDBlock" !== >>U<<.typeObj.type && "SlabBlock" !== >>U<<.typeObj.type || (>>>>o<<<< = >>U<<.typeObj.id)
                }

                Removed: //'

                let K = null === (>>U<< = this.noa.targetedBlock) || void 0 === >>U<< ? void 0 : >>U<<.adjacent;
                if (this.noa.targetedBlock && ( () => {
                    var >>U<<;
                    const >>>m<<< = this.noa.targetedBlock.position
                      , >>>>o<<<< = this.noa.getBlock(>>>m<<<);
                    return null !== (>>U<< = y.blockMetadata[>>>>o<<<<].canBePlacedOver) && void 0 !== >>U<< && >>U<<
                }
                )() && (K = this.noa.targetedBlock.position),
                >>>>o<<<< && this.noa.targetedBlock && ((0,
                >>>>>>h.b<<<<<<)().posSatisfiesModifyConstraints(this.noa.playerEntity, K[0], K[1], K[2]) || "Moonstone Explosive" === (0,
                >>>>>>h.b<<<<<<)().getItemName(>>>>o<<<<))) {
                    const [>>U<<,>>>m<<<,>>>>>C<<<<<] = K;

                    '//

                    if (null === s.m[>>>>o<<<<].meta.rot && null === s.m[>>>>o<<<<].meta.halfblockPlacement || (>>>>o<<<< = this.getPlaceBlockRotatedId(>>>>o<<<<, >>U<<, >>>m<<<, >>>>>C<<<<<)),
                    (0,
                    >>>>>>h.b<<<<<<)().playerCanPlaceItem(this.noa.playerEntity, >>U<<, >>>m<<<, >>>>>C<<<<<, >>>>o<<<<)) {
                        var W;
                        const H = this.noa.getBlock([>>U<<, >>>m<<<, >>>>>C<<<<<]);
                        if ((0 === H || y.blockMetadata[H].fluid || null !== (W = y.blockMetadata[H]) && void 0 !== W && W.canBePlacedOver) && >>>>o<<<< !== H) {
                            this.noa.ents.getMoveState(this.heldItemState.__id).setArmsAreSwinging();
                            const >>U<< = Q().copy([], K);  // replace var (K) with "blockBelowPlayer"
                            if (function(>>U<<, >>>m<<<) { // remove "if"
                                (0,
                                p.Wb)(k.je, {
                                    pos: >>U<<,
                                    toBlock: >>>m<<<,
                                    checker: I.e
                                }, !0)
                            }(>>U<<, >>>>o<<<<), // add ")" between "}" and "("
                            (0,
                            >>>>>>h.b<<<<<<)().setBlock(>>U<<[0], >>U<<[1], >>U<<[2], >>>>o<<<<),
                            (0,
                            s.o)(>>>>o<<<<, !1),
                            n && !this.noa.serverSettings.creative) { // add "if (" before "n"
                                const >>U<< = this.noa.ents.getInventoryState(this.noa.playerEntity);
                                >>.inventory.removeItem(>>U<<.inventory.getSelectedSlotIndex(), 1)
                            }

                Remove: //'

                            "Board" === this.bloxd.getMetaInfo(>>>>o<<<<).rootName && f.f.publish("EditBoard", {
                                pos: >>U<<
                            })
                    '//

                        }
                    }
                } else //add "if ("
                    this.noa.targetedBlock && !(0,
                    >>>>>>h.b<<<<<<)().posSatisfiesModifyConstraints(this.noa.playerEntity, >>>m<<<.adjacent[0], >>>m<<<.adjacent[1], >>>m<<<.adjacent[2])//add ")" && // replace "&&" with: " { if"(this.noa.serverSettings.canChange || this.noa.serverSettings.cantChangeError || "You cannot modify this block" !== this.noa.serverSettings.cantChangeError) && //replace "&&" with "{" f.f.publish("showError", {
                        error: this.noa.serverSettings.cantBuildError || this.noa.serverSettings.cantChangeError
                    }) //replace "})" with "}); }}"
            }


placeUnderPlayer:

            placeUnderPlayer() {
                var >>U<<;
                const >>>m<<< = this.noa.targetedBlock;
                let >>>>o<<<<;
                this.noa.serverSettings && (>>>>o<<<< = s.m[this.noa.serverSettings.defaultBlock].id);
                
                const n = this.noa.ents.hasComponent(this.noa.playerEntity, this.noa.ents.names.inventory);
                if (n) {
                    >>>>o<<<< = null;
                    const >>U<< = this.noa.ents.getInventoryState(this.noa.playerEntity).selectedItem;
                    !>>U<< || "CubeBlock" !== >>U<<.typeObj.type && "TwoDBlock" !== >>U<<.typeObj.type && "SlabBlock" !== >>U<<.typeObj.type || (>>>>o<<<< = >>U<<.typeObj.id)
                }
                
                //Added //'
                // Get the player's current position
                const playerPos = this.noa.ents.getPosition(this.noa.playerEntity);
                // Calculate the position directly beneath the player
                const blockBelowPlayer = [Math.floor(playerPos[0]), Math.floor(playerPos[1] - 1), Math.floor(playerPos[2])];
            
                // Check if the player can place the block below
                if (>>>>o<<<< && blockBelowPlayer && ((0, >>>>>>h.b<<<<<<)().posSatisfiesModifyConstraints(this.noa.playerEntity, blockBelowPlayer[0], blockBelowPlayer[1], blockBelowPlayer[2]) || "Moonstone Explosive" === (0, >>>>>>h.b<<<<<<)().getItemName(>>>>o<<<<))) {
                    
                    const [>>U<<, >>>m<<<, >>>>>C<<<<<] = blockBelowPlayer;
            
                    // Handle rotation or block placement type (if applicable)
                    '//

                    
                    if (null === s.m[>>>>o<<<<].meta.rot && null === s.m[>>>>o<<<<].meta.halfblockPlacement || (>>>>o<<<< = this.getPlaceBlockRotatedId(>>>>o<<<<, >>U<<, >>>m<<<, >>>>>C<<<<<)),
                    (0, >>>>>>h.b<<<<<<)().playerCanPlaceItem(this.noa.playerEntity, >>U<<, >>>m<<<, >>>>>C<<<<<, >>>>o<<<<)) {
                        var W;
                        const H = this.noa.getBlock([>>U<<, >>>m<<<, >>>>>C<<<<<]);
            
                        if ((0 === H || y.blockMetadata[H].fluid || null !== (W = y.blockMetadata[H]) && void 0 !== W && W.canBePlacedOver) && >>>>o<<<< !== H) {
                            this.noa.ents.getMoveState(this.heldItemState.__id).setArmsAreSwinging();
                            const >>U<< = Q().copy([], blockBelowPlayer);
                            
                            (function(>>U<<, >>>m<<<) {
                                (0, p.Wb)(k.je, {
                                    pos: >>U<<,
                                    toBlock: >>>m<<<,
                                    checker: I.e
                                }, !0)
                            })(>>U<<, >>>>o<<<<);
            
                            (0, >>>>>>h.b<<<<<<)().setBlock(>>U<<[0], >>U<<[1], >>U<<[2], >>>>o<<<<);
                            (0, s.o)(>>>>o<<<<, !1);
            
                            // If not in creative mode, consume the item from the player's inventory
                            if (n && !this.noa.serverSettings.creative) {
                                const >>U<< = this.noa.ents.getInventoryState(this.noa.playerEntity);
                                >>.inventory.removeItem(>>U<<.inventory.getSelectedSlotIndex(), 1);
                            }
            
                            // Handle 'Board' block type
                            "Board" === this.bloxd.getMetaInfo(>>>>o<<<<).rootName && f.f.publish("EditBoard", { pos: >>U<< });
                        }
                    }
                } else if (this.noa.targetedBlock && !(0, >>>>>>h.b<<<<<<)().posSatisfiesModifyConstraints(this.noa.playerEntity, >>>m<<<.adjacent[0], >>>m<<<.adjacent[1], >>>m<<<.adjacent[2])) {
                    if (this.noa.serverSettings.canChange || this.noa.serverSettings.cantChangeError || "You cannot modify this block" !== this.noa.serverSettings.cantChangeError) {
                        f.f.publish("showError", {
                            error: this.noa.serverSettings.cantBuildError || this.noa.serverSettings.cantChangeError
                        });
                    }
                }
            }

// Find: placeBlock() { (which should be in a "class...extends..."")

// then add:

            tick() {
                if (window.scaffold) {
                    this.placeUnderPlayer()
                }
            }
            //'Scaffold'//

            modified placeBlock -> placeUnderPlayer

        above placeBlock() {


        raw example:

        before:

            placeBlock() {
                var Y;
                const P = this.noa.targetedBlock;
                let X;
            
            ......

        after:

            tick() {
                if (window.scaffold) {
                    this.placeUnderPlayer()
                }
            }
            //'Scaffold'//
            placeUnderPlayer() {
            placeBlock() {
                var Y;
                const P = this.noa.targetedBlock;
                let X;
            
            ......

Infinite Jump:

    find: ".serverSettings.airJumpCount;" and replace that and the var before that with: "window.AirJump;"

    Raw example:

    before:

            const b = (G || X._jumpCount < function(Y, P, X) {
                const q = Y.serverSettings.airJumpCount;
                if (X)
                    return q + 1;
                return q
            }(Y, X.__id, c))

    after:

            const b = (G || X._jumpCount < function(Y, P, X) {
                const q = window.AirJump;
                if (X)
                    return q + 1;
                return q
            }(Y, X.__id, c))

High Jump:

    find: line with: ".jumpMultiplier.getTotalMultipliedVal()".

    Then between ".jumpAmount" and "*" in that line add:
    "+ ((typeof window.JumpAmount === 'number' && !isNaN(window.JumpAmount)) ? window.JumpAmount : 0) "              

    Raw Example:

    Before:

    s.applyImpulse([0, Y.serverSettings.jumpAmount * q.jumpMultiplier.getTotalMultipliedVal(), 0]),

    After:

    s.applyImpulse([0, Y.serverSettings.jumpAmount + ((typeof window.JumpAmount === 'number' && !isNaN(window.JumpAmount)) ? window.JumpAmount : 0) * q.jumpMultiplier.getTotalMultipliedVal(), 0]),


Speed:

    Find: 10th: ".vehicle.tier";
    Then 2 lines under OR under ".jump;" add:

    Object.defineProperty(window, 'GlobalSpeed', {
                get: function () {
                    return this._globalSpeed;
                },
                set: function (value) {
                    this._globalSpeed = value;
                    >>r<<.walkingSpeed = value;
                },
                configurable: true
            });
        
            if (typeof window._globalSpeed === 'undefined') {
                window._globalSpeed = >>r<<.walkingSpeed;
            }
    Note: 1st var is in >><< & you can obtain it from: const {serverSettings: >>r<<} = Y

    //Raw Example:

    //Before:

        const {serverSettings: r} = Y
              , L = u.d[X.vehicle.type]
              , W = q.u[X.vehicle.type].getValues(X.vehicle.tier);
            P.jumping = !!e.jump;
        

        const c = e.forward ? e.backward ? 0 : 1 : e.backward ? -1 : 0
            , S = e.right ? e.left ? 0 : 1 : e.left ? -1 : 0;
            s.e.clientEscMenuOptions.crouchIsToggle ? P.crouching = O.crouchToggled : (e.crouch ? P.crouching = !0 : P.crouching = !1,
            O.crouchToggled = !1);
            const a = L.isMoving ? L.isMoving(S, c, X) : c || S;

    //After:

        const {serverSettings: r} = Y
              , L = u.d[X.vehicle.type]
              , W = q.u[X.vehicle.type].getValues(X.vehicle.tier);
            P.jumping = !!e.jump;
            Object.defineProperty(window, 'GlobalSpeed', {
                get: function () {
                    return this._globalSpeed;
                },
                set: function (value) {
                    this._globalSpeed = value;
                    r.walkingSpeed = value;
                },
                configurable: true
            });
        
            if (typeof window._globalSpeed === 'undefined') {
                window._globalSpeed = r.walkingSpeed;
            }
            const c = e.forward ? e.backward ? 0 : 1 : e.backward ? -1 : 0
              , S = e.right ? e.left ? 0 : 1 : e.left ? -1 : 0;
            s.e.clientEscMenuOptions.crouchIsToggle ? P.crouching = O.crouchToggled : (e.crouch ? P.crouching = !0 : P.crouching = !1,
            O.crouchToggled = !1);
            const a = L.isMoving ? L.isMoving(S, c, X) : c || S;

Changer:

   Find all 'this.noa.serverSettings.canChange' s and replace with: '(this.noa.serverSettings.canChange||window.canChangeAllBlocks)'
   Find all 'this.serverSettings.canChange' s and replace with: '(this.serverSettings.canChange||window.canChangeAllBlocks)'

Seeker:

   Find all '(var).serverSettings.canUseZoomKey' s and replace with: '((var).serverSettings.canUseZoomKey||window.canZoom)'
   Note: just search for all '.serverSettings.canUseZoomKey' and replace it and var before.

NameTagESP:

   Find: 'height: .2,' and replace with: 'height: (window.NameTagESP ? 1 : .2),' .
   Find: 'width: .003125 ' and replace with: 'width: (window.NameTagESP ? 0.015625 : 0.003125) ' .
   Find: '(var).serverSettings.canSeeNametagsThroughWalls' and replace with: '((var).serverSettings.canSeeNametagsThroughWalls===true || window.NameTagESP)' .
   Find line with: '(var).serverSettings.canSeeNametagsThroughWalls' and find '(var).crouching' in that line and then replace that with: 'window.NameTagESP' .

Gun Upgrade:

   Search up third: '"AK-47"' and replace whole wrap in 'const (var) = {>>here<<}' with:

               "AK-47": {
                gunType: "semi_automatic",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-5.5, -.25, 0],
                muzzleFlashScale: 1.5,
                autoFireWithMouse: !0,
                fireRate: 7878,
                damage: 20,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .8,
                subsequentTagSpeedReductionScalar: .55,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .005,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            M16: {
                gunType: "semi_automatic",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-5.5, -.5, 0],
                muzzleFlashScale: 1.5,
                autoFireWithMouse: !0,
                fireRate: 7878,
                damage: 18,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .8,
                subsequentTagSpeedReductionScalar: .55,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .005,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            MP40: {
                gunType: "submachine",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-5.5, -.25, 0],
                muzzleFlashScale: 1.5,
                autoFireWithMouse: !0,
                fireRate: 7878,
                damage: 14,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .85,
                subsequentTagSpeedReductionScalar: .4,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .005,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            "TAR-21": {
                gunType: "rifle",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-7.5, -.5, 0],
                muzzleFlashScale: 3,
                autoFireWithMouse: 1,
                fireRate: 7878,
                fireRateWithHeldTouch: 130,
                damage: 50,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .75,
                subsequentTagSpeedReductionScalar: .6,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .003,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            M1911: {
                gunType: "pistol",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-3.5, -1, 0],
                autoFireWithMouse: 1,
                fireRate: 7878,
                damage: 22,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .8,
                subsequentTagSpeedReductionScalar: .55,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .005,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            "Double Barrel": {
                gunType: "shotgun",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-6.5, -1, 0],
                muzzleFlashScale: 5,
                autoFireWithMouse: 1,
                fireRate: 400,
                fireRateWithHeldTouch: 130,
                damage: 12,
                shotPelletCount: 10,
                clipSize: 999999,
                reloadBulletsIndividually: !1,
                bulletReloadTime: 100,
                cockTime: 70,
                tagSpeedMult: .65,
                subsequentTagSpeedReductionScalar: .6,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                hasVerticalInaccuracy: !0,
                recoveryRate: .005,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6
            },
            AWP: {
                gunType: "rifle",
                scopeType: "sniper",
                muzzleFlashOffsetFromGun: [-8, -2, 0],
                muzzleFlashScale: 2,
                autoFireWithMouse: 1,
                fireRate: 7878,
                fireRateWithHeldTouch: 130,
                damage: 70,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .75,
                subsequentTagSpeedReductionScalar: .6,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                recoveryRate: .02,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 5e-6,
                aimZoomFactor: 1.5
            },
            Minigun: {
                gunType: "submachine",
                scopeType: "none",
                muzzleFlashOffsetFromGun: [-8, -2, 0],
                muzzleFlashScale: 5,
                autoFireWithMouse: !0,
                fireRate: 7878,
                damage: 20,
                reloadTime: 1,
                clipSize: 999999,
                tagSpeedMult: .75,
                subsequentTagSpeedReductionScalar: .6,
                inaccuracyStanding: 0,
                inaccuracyFromShot: 0,
                inaccuracyMovement: 0,
                yVelocityInaccuracy: 0,
                inaccuracyFromJump: 0,
                altInaccuracyStanding: 0,
                altInaccuracyFromShot: 0,
                altInaccuracyMovement: 0,
                hasVerticalInaccuracy: !0,
                recoveryRate: .01,
                minKickback: 0,
                maxKickback: 0,
                kickbackRate: 0,
                kickbackDecreaseRate: 1e-5
            }
        };
