Anti-CamShake:

   //Find:

   .addCameraShake(

    // & wrap around with:

    if (!window.camshake) {
    }

        raw example;


        // replace:

        e.addCameraShake(P / 40);
                    
        // with:

        if (!window.camshake) {
        e.addCameraShake(P / 40);
        }



Anti-Knock:

    // Find first: 

    '.applyImpulse('


    // & wrap around with:

    'if (!window.antiknock) {
    }
    '


        raw example:


        // replace:

        L.applyImpulse(W)

        // with: 

        if (!window.antiknock) {
            L.applyImpulse(W)
        }




SecureEdge/Prevent Falloff:

// to find from non-modified js: search: ').preventFallOffEdge'

                        //''/

                        //' to define States and Bodies:

                        // const physicsBody = >>U<<.ents.getPhysicsBody(>>>O<<<);
                        // const moveState = >>U<<.ents.getMoveState(>>>O<<<);

                        // get vars from: onAdd: function(>>Y<<, P) {}  & for (const P of >>>X<<<) 
                        // 1st var: '>><<'; 2nd: '>>><<<'

                        //' to find vars for toggle preventfalloff/secureEdge: 

                        //1st var: '<<>>'

                    //      if (!window.preventfalloff) {
                    //      if (physicsBody.preventFallOffEdge && !<<P>>._preventFallOffLastTick) {
                    //          (0, s.ac)();
                    //      }
                    //
                    //      physicsBody.preventFallOffEdge = moveState.crouching;
                    //        <<P>>._preventFallOffLastTick = moveState.crouching;
                    //    } else {
                    //        physicsBody.preventFallOffEdge = true;
                    //        <<P>>._preventFallOffLastTick = true;
                    //    }
                    
                    // get vars from (const <<P>> of X)

                    raw example:
                    
                    replace:

                        Y.ents.getPhysicsBody(X).preventFallOffEdge && !P._preventFallOffLastTick && (0,
                        q.Qb)(),
                        Y.ents.getPhysicsBody(X).preventFallOffEdge = Y.ents.getMoveState(X).crouching,
                        P._preventFallOffLastTick = Y.ents.getMoveState(X).crouching

                    with:

                        const physicsBody = Y.ents.getPhysicsBody(X);
                        const moveState = Y.ents.getMoveState(X);

                        if (!window.preventfalloff) {
                            if (physicsBody.preventFallOffEdge && !P._preventFallOffLastTick) {
                                (0, s.ac)();
                            }
        
                            physicsBody.preventFallOffEdge = moveState.crouching;
                            P._preventFallOffLastTick = moveState.crouching;
                        } else {
                            physicsBody.preventFallOffEdge = true;
                            P._preventFallOffLastTick = true;
                        }

Reach:

    // To find reach data go to first: tryHitEntity() { 

        find var from const (var)

        eg. P from: "const P" in:

            tryHitEntity() {
                var Y;
                const >>P<< = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                  , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3);
                return X === S.c.HIT_ENTITY ? {
                    pickDir: P,
                    hitEId: q,
                    meshNodeHit: O
                } : {
                    pickDir: P,
                    hitEId: null,
                    meshNodeHit: null
                }
            }

        then at (var, 3);  :

        add " * (window.reach || 1)" to 3 to form:

        (var, 3 * (window.reach || 1));

        raw example:

        before:

            tryHitEntity() {
                    var Y;
                    const P = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                    , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3);
                    return X === S.c.HIT_ENTITY ? {
                        pickDir: P,
                        hitEId: q,
                        meshNodeHit: O
                    } : {
                        pickDir: P,
                        hitEId: null,
                        meshNodeHit: null
                    }
                }

        to:

            tryHitEntity() {
                    var Y;
                    const P = null !== (Y = this.noa.actionDirection) && void 0 !== Y ? Y : this.noa.camera.getDirection()
                    , {hitResult: X, hitEId: q, distanceTravelled: u, globalHitPosition: s, hitNormal: e, meshNodeHit: O} = this.pickActionHelper.doPickAction(P, 3 * (window.reach || 1));
                    return X === S.c.HIT_ENTITY ? {
                        pickDir: P,
                        hitEId: q,
                        meshNodeHit: O
                    } : {
                        pickDir: P,
                        hitEId: null,
                        meshNodeHit: null
                    }
                }

